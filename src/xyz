import React from "react";
import { Button } from "react-bootstrap";
import { useNavigate } from "react-router";
import { useUserAuth } from "../context/UserAuthContext";

const Home = () => {
  const { logOut, user } = useUserAuth();
  const navigate = useNavigate();
  const handleLogout = async () => {
    try {
      await logOut();
      navigate("/");
    } catch (error) {
      console.log(error.message);
    }
  };
  return (
    <>
      <div className="p-4 box mt-3 text-center">
        Hello Welcome <br />
       
      </div>
      <div className="d-grid gap-2">
        <Button variant="primary" onClick={handleLogout}>
          Log out
        </Button>
      </div>
    </>
  );
};

export default Home;




// cgatgpt component

import React, { useState } from "react";
import data from "../filedata/jsondata";

import {
  BarChart,
  Bar,
  PieChart,
  Pie,
  LineChart,
  Line,
  ScatterChart,
  Scatter,
  AreaChart,
  Area,
  RadarChart,
  PolarGrid,
  PolarAngleAxis,
  PolarRadiusAxis,
  Radar,
} from "recharts";

function Home() {
  const [filteredData, setFilteredData] = useState(data);
  const [selectedSource, setSelectedSource] = useState(null);
  const [selectedCountry, setSelectedCountry] = useState(null);
  const [selectedRelevance, setSelectedRelevance] = useState(null);

  // Apply filters to the data
  const applyFilters = () => {
    let filtered = data;

    if (selectedSource) {
      filtered = filtered.filter((item) => item.source === selectedSource);
    }

    if (selectedCountry) {
      filtered = filtered.filter((item) => item.country === selectedCountry);
    }

    if (selectedRelevance) {
      filtered = filtered.filter(
        (item) => item.relevance === selectedRelevance
      );
    }

    setFilteredData(filtered);
  };

  return (
    <div>
      <h1>Charts</h1>

      {/* Source Filter */}
      <select
        value={selectedSource}
        onChange={(e) => setSelectedSource(e.target.value)}
      >
        <option value="">All Sources</option>
        {/* Render unique source values from data */}
        {data
          .map((item) => item.source)
          .filter((source) => source !== "")
          .sort()
          .map((source) => (
            <option key={source} value={source}>
              {source}
            </option>
          ))}
      </select>

      {/* Country Filter */}
      <select
        value={selectedCountry}
        onChange={(e) => setSelectedCountry(e.target.value)}
      >
        <option value="">All Countries</option>
        {/* Render unique country values from data */}
        {data
          .map((item) => item.country)
          .filter((country) => country !== "")
          .sort()
          .map((country) => (
            <option key={country} value={country}>
              {country}
            </option>
          ))}
      </select>

      {/* Relevance Filter */}
      <select
        value={selectedRelevance}
        onChange={(e) => setSelectedRelevance(e.target.value)}
      >
        <option value="">All Relevance Levels</option>
        {/* Render unique relevance values from data */}
        {data
          .map((item) => item.relevance)
          .filter((relevance) => relevance !== "")
          .sort()
          .map((relevance) => (
            <option key={relevance} value={relevance}>
              {relevance}
            </option>
          ))}
      </select>

      {/* Apply Filters */}
      <button onClick={applyFilters}>Apply Filters</button>

      {/* Bar Chart */}
      <BarChart width={600} height={300} data={filteredData}>
        <Bar dataKey="intensity" fill="#8884d8" />
      </BarChart>

      {/* Pie Chart */}
      <PieChart width={600} height={300}>
        <Pie
          data={filteredData}
          dataKey="relevance"
          nameKey="sector"
          cx="50%"
          cy="50%"
          outerRadius={100}
          fill="#8884d8"
        />
      </PieChart>

      {/* Line Chart */}
      <LineChart width={600} height={300} data={filteredData}>
        <Line type="monotone" dataKey="likelihood" stroke="#8884d8" />
      </LineChart>

      {/* Scatter Chart */}
      <ScatterChart width={600} height={300} data={filteredData}>
        <Scatter data={filteredData} fill="#8884d8" />
      </ScatterChart>

      {/* Area Chart */}
      <AreaChart width={600} height={300} data={filteredData}>
        <Area type="monotone" dataKey="intensity" fill="#8884d8" />
      </AreaChart>

      {/* Radar Chart */}
      <RadarChart
        outerRadius={150}
        width={600}
        height={300}
        data={filteredData}
      >
        <PolarGrid />
        <PolarAngleAxis dataKey="sector" />
        <PolarRadiusAxis angle={30} domain={[0, 10]} />
        <Radar
          name="Relevance"
          dataKey="relevance"
          stroke="#8884d8"
          fill="#8884d8"
          fillOpacity={0.6}
        />
      </RadarChart>
    </div>
  );
}

export default Home;


